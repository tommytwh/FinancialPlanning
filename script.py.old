# Let me create the enhanced HTML with a toggle switch for investment continuation
html_content = '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Retirement Planning Tool</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: Arial, sans-serif; margin: 24px; background: #f0f2f7; }
        .main-grid { display: flex; flex-direction: row; gap: 30px; max-width: 1100px; margin: auto; align-items: flex-start; }
        .side-panel { background: #fff; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,.09); padding: 32px 28px; width: 400px; min-width: 320px; }
        .chart-panel { flex: 1; background: #fff; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,.06); padding: 32px; min-width: 380px; display: flex; flex-direction: column; gap: 32px; }
        h2, h3 { margin-bottom: 10px; color: #34495e; }
        label { display: block; margin: 10px 0 5px; font-weight: 500; }
        input[type="number"] { padding: 6px; margin-bottom: 16px; width: 170px; border: 1px solid #d4d5da; border-radius: 4px; }
        .slider-row { display: flex; align-items: center; gap: 15px; margin-bottom: 15px; }
        output { font-weight: bold; min-width: 40px; text-align: center; }
        canvas { max-height: 340px; }
        .result { margin-top: 18px; padding: 16px; background: #eef; border-radius: 7px; color: #224; font-size: 1.09em; }
        .summary { margin-bottom: 10px;}
        
        /* Toggle Switch Styling */
        .toggle-container { 
            display: flex; 
            align-items: center; 
            margin-bottom: 20px; 
            padding: 12px; 
            background: #f8f9fa; 
            border-radius: 6px; 
            border: 1px solid #e9ecef;
        }
        .toggle-switch { 
            position: relative; 
            display: inline-block; 
            width: 60px; 
            height: 30px; 
            margin-right: 12px;
        }
        .toggle-switch input { 
            opacity: 0; 
            width: 0; 
            height: 0; 
        }
        .toggle-slider { 
            position: absolute; 
            cursor: pointer; 
            top: 0; 
            left: 0; 
            right: 0; 
            bottom: 0; 
            background-color: #ccc; 
            transition: .4s; 
            border-radius: 30px;
        }
        .toggle-slider:before { 
            position: absolute; 
            content: ""; 
            height: 24px; 
            width: 24px; 
            left: 3px; 
            bottom: 3px; 
            background-color: white; 
            transition: .4s; 
            border-radius: 50%;
        }
        input:checked + .toggle-slider { 
            background-color: #2ecc71; 
        }
        input:checked + .toggle-slider:before { 
            transform: translateX(30px); 
        }
        .toggle-label { 
            font-weight: 500; 
            color: #495057;
        }
        
        @media (max-width:900px) {
          .main-grid { flex-direction: column; }
          .chart-panel { width: 100%; min-width: unset; }
          .side-panel { width: 100%; min-width: unset; }
        }
    </style>
</head>
<body>
<div class="main-grid">
    <div class="side-panel">
        <h2>Retirement Info</h2>
        <label>Current Age:</label>
        <input type="number" id="age" value="30" min="18" max="75" oninput="updateCalculations()">
        <label>Retirement Age:</label>
        <input type="number" id="retireAge" value="65" min="35" max="85" oninput="updateCalculations()">
        <label>Annual Income ($):</label>
        <input type="number" id="annualIncome" value="90000" min="0" step="1000" oninput="updateCalculations()">
        <small>Income earned each year until retirement (not invested, for info)</small>
        <label>Initial Investment ($):</label>
        <input type="number" id="invest" value="100000" min="1000" step="100" oninput="updateCalculations()">
        <label>Monthly Investment ($):</label>
        <input type="number" id="monthlyInvest" value="1000" min="0" step="50" oninput="updateCalculations()">
        
        <div class="toggle-container">
            <label class="toggle-switch">
                <input type="checkbox" id="continueInvesting" checked onchange="updateCalculations()">
                <span class="toggle-slider"></span>
            </label>
            <div class="toggle-label">Continue monthly investments after retirement</div>
        </div>
        
        <label>Singapore CPF Amount ($):</label>
        <input type="number" id="cpfAmount" value="80000" min="0" step="1000" oninput="updateCalculations()">
        <small>CPF compounds at 4% per annum until age 85</small>
        <label>Other Asset Amount ($):</label>
        <input type="number" id="assetAmount" value="50000" min="0" step="1000" oninput="updateCalculations()">
        <label>Monthly Retirement Spend ($):</label>
        <input type="number" id="monthlySpend" value="3000" min="500" step="100" oninput="updateCalculations()">
        <label>Low Risk Allocation (%)</label>
        <div class="slider-row">
            <input type="range" id="lowRisk" min="0" max="100" value="60" oninput="updateSliders()">
            <output id="lowRiskValue">60</output>%
        </div>
        <label>High Risk Allocation (%)</label>
        <div class="slider-row">
            <input type="range" id="highRisk" min="0" max="100" value="40" oninput="updateSliders()">
            <output id="highRiskValue">40</output>%
        </div>
        <label>Low Risk Annual Return (%)</label>
        <input type="number" id="lowRate" value="4" min="1" max="10" step="0.1" oninput="updateCalculations()">
        <label>High Risk Annual Return (%)</label>
        <input type="number" id="highRate" value="8" min="3" max="15" step="0.1" oninput="updateCalculations()">
        <div class="result" id="result"></div>
    </div>
    <div class="chart-panel">
        <div>
            <h3>Investment Growth Until Age 85</h3>
            <canvas id="growthChart"></canvas>
        </div>
        <div>
            <h3>Retirement Fund vs Spending</h3>
            <canvas id="spendingChart"></canvas>
        </div>
    </div>
</div>
<script>
    let growthChart, spendingChart;
    const lowSlider = document.getElementById('lowRisk');
    const highSlider = document.getElementById('highRisk');
    const lowOutput = document.getElementById('lowRiskValue');
    const highOutput = document.getElementById('highRiskValue');

    function updateSliders() {
        const changedSlider = event.target;
        const otherSlider = changedSlider.id === "lowRisk" ? highSlider : lowSlider;
        const otherOutput = changedSlider.id === "lowRisk" ? highOutput : lowOutput;
        const currentOutput = changedSlider.id === "lowRisk" ? lowOutput : highOutput;
        otherSlider.value = 100 - changedSlider.value;
        currentOutput.value = changedSlider.value;
        otherOutput.value = otherSlider.value;
        updateCalculations();
    }

    function calculateProjections() {
        const age = Number(document.getElementById('age').value);
        const retireAge = Number(document.getElementById('retireAge').value);
        const annualIncome = Number(document.getElementById('annualIncome').value);
        const invest = Number(document.getElementById('invest').value);
        const monthlyInvest = Number(document.getElementById('monthlyInvest').value);
        const cpfAmount = Number(document.getElementById('cpfAmount').value);
        const assetAmount = Number(document.getElementById('assetAmount').value);
        const continueInvesting = document.getElementById('continueInvesting').checked;
        const lowPct = Number(lowSlider.value) / 100;
        const highPct = Number(highSlider.value) / 100;
        const lowRate = Number(document.getElementById('lowRate').value) / 100;
        const highRate = Number(document.getElementById('highRate').value) / 100;
        const monthlySpend = Number(document.getElementById('monthlySpend').value);

        const yearsToRetire = retireAge - age;
        const yearsAfterRetire = 85 - retireAge;
        const totalYears = 85 - age;
        
        if (totalYears <= 0) return null;

        // Track income earned until retirement
        const totalIncome = annualIncome * yearsToRetire;

        // Portfolio/CPF growth from current age to 85
        const years = [];
        const lowRiskValues = [];
        const highRiskValues = [];
        const totalValues = [];
        const cpfValues = [];
        let lowRiskFund = invest * lowPct;
        let highRiskFund = invest * highPct;
        let cpfFund = cpfAmount;

        for (let year = 0; year <= totalYears; year++) {
            const currentAge = age + year;
            years.push(currentAge);
            
            // Add monthly contributions
            if (year > 0) {
                // If continuing investment is ON, add contributions throughout
                // If continuing investment is OFF, only add contributions until retirement
                if (continueInvesting || currentAge <= retireAge) {
                    lowRiskFund += monthlyInvest * 12 * lowPct;
                    highRiskFund += monthlyInvest * 12 * highPct;
                }
            }
            
            // Apply investment growth
            lowRiskFund *= (1 + lowRate);
            highRiskFund *= (1 + highRate);

            // CPF grows at 4% until age 85
            cpfFund *= 1.04;
            
            // Subtract retirement spending if at/after retirement age
            if (currentAge >= retireAge) {
                const annualSpend = monthlySpend * 12;
                // Proportional spending from each investment bucket
                const totalInvestment = lowRiskFund + highRiskFund;
                if (totalInvestment > 0) {
                    const lowSpend = annualSpend * (lowRiskFund / totalInvestment) * 0.5; // 50% from investments
                    const highSpend = annualSpend * (highRiskFund / totalInvestment) * 0.5;
                    lowRiskFund = Math.max(0, lowRiskFund - lowSpend);
                    highRiskFund = Math.max(0, highRiskFund - highSpend);
                }
                
                // Also spend from CPF and assets proportionally
                cpfFund = Math.max(0, cpfFund - annualSpend * 0.3); // 30% from CPF
                // Assets are drawn down at 20%
            }

            lowRiskValues.push(lowRiskFund);
            highRiskValues.push(highRiskFund);
            totalValues.push(lowRiskFund + highRiskFund + cpfFund + assetAmount);
            cpfValues.push(cpfFund + assetAmount);
        }

        // Fund available at retirement and at age 85
        const retirementIndex = yearsToRetire;
        const totalAtRetirement = totalValues[retirementIndex];
        const finalValue = totalValues[totalValues.length - 1];

        // Calculate spending projection during retirement years
        const spendingYears = [];
        const remainingFunds = [];
        const cumulativeSpending = [];
        let currentFund = totalAtRetirement;
        const annualSpend = monthlySpend * 12;
        
        for (let year = 0; year <= yearsAfterRetire; year++) {
            spendingYears.push(retireAge + year);
            remainingFunds.push(Math.max(0, currentFund));
            cumulativeSpending.push(year * annualSpend);
            currentFund -= annualSpend;
        }
        
        const totalSpendNeeded = monthlySpend * 12 * yearsAfterRetire;
        
        return {
            years,
            lowRiskValues,
            highRiskValues,
            cpfValues,
            totalValues,
            totalAtRetirement,
            finalValue,
            totalSpendNeeded,
            yearsAfterRetire,
            retireAge,
            spendingYears,
            remainingFunds,
            cumulativeSpending,
            cpfFund: cpfValues[cpfValues.length - 1] - assetAmount,
            assetAmount,
            monthlySpend,
            totalIncome,
            annualIncome,
            continueInvesting
        };
    }

    function updateCharts() {
        const data = calculateProjections();
        if (!data) return;
        
        // Growth Chart
        if (growthChart) {
            growthChart.data.labels = data.years;
            growthChart.data.datasets[0].data = data.lowRiskValues;
            growthChart.data.datasets[1].data = data.highRiskValues;
            growthChart.data.datasets[2].data = data.cpfValues;
            growthChart.data.datasets[3].data = data.totalValues;
            growthChart.update('none');
        }
        
        // Spending Chart
        if (spendingChart) {
            spendingChart.data.labels = data.spendingYears;
            spendingChart.data.datasets[0].data = data.remainingFunds;
            spendingChart.data.datasets[1].data = data.cumulativeSpending;
            spendingChart.update('none');
        }
        
        updateSummary(data);
    }

    function updateSummary(data) {
        const isSufficient = data.finalValue >= 0;
        const surplus = data.finalValue;
        let summary = `
          <div class="summary">
            <strong>Income Earned Until Retirement:</strong> $${(data.totalIncome).toLocaleString(undefined,{maximumFractionDigits:0})} 
            (${data.annualIncome.toLocaleString(undefined,{maximumFractionDigits:0})} x ${data.yearsAfterRetire + (85 - data.retireAge)} years)<br>
            <strong>Investment Strategy:</strong> ${data.continueInvesting ? 'Continue investing after retirement' : 'Stop investing at retirement'}<br>
            <strong>Portfolio at Retirement:</strong> $${(data.totalAtRetirement).toLocaleString(undefined,{maximumFractionDigits:0})}<br>
            <strong>Portfolio at Age 85:</strong> $${(data.finalValue).toLocaleString(undefined,{maximumFractionDigits:0})}<br>
            <strong>Total Spending Needed (Age ${data.retireAge}-85):</strong> $${data.totalSpendNeeded.toLocaleString(undefined,{maximumFractionDigits:0})}<br>
          </div>
        `;
        
        if (isSufficient && data.finalValue > 0) {
            summary += `<p style="color:#2ecc71; font-size:1.1em">✅ Your retirement plan looks solid! You'll have $${surplus.toLocaleString(undefined,{maximumFractionDigits:0})} remaining at age 85.</p>`;
        } else if (data.finalValue <= 0) {
            summary += `<p style="color:#e74c3c; font-size:1.1em">⚠️ Your funds may be depleted before age 85. Consider ${data.continueInvesting ? 'increasing savings or reducing spending' : 'continuing investments after retirement'}.</p>`;
        }
        
        document.getElementById('result').innerHTML = summary;
    }

    function updateCalculations() { updateCharts(); }

    function initializeCharts() {
        // Growth Chart
        const growthCtx = document.getElementById('growthChart').getContext('2d');
        growthChart = new Chart(growthCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                  { label: 'Low Risk Investment', data: [], borderColor: '#3498db', backgroundColor: 'rgba(52,152,219,0.16)', tension: 0.4 },
                  { label: 'High Risk Investment', data: [], borderColor: '#e74c3c', backgroundColor: 'rgba(231,76,60,0.16)', tension: 0.4 },
                  { label: 'CPF + Assets', data: [], borderColor: '#964B00', backgroundColor: 'rgba(150,75,0,0.10)', tension: 0.4 },
                  { label: 'Total Portfolio', data: [], borderColor: '#2ecc71', backgroundColor: 'rgba(46,204,113,0.16)', borderWidth: 3, tension: 0.4 }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true, ticks: { callback: value => '$' + value.toLocaleString() }},
                    x: { title: { display: true, text: 'Age' } }
                },
                plugins: {
                    tooltip: { callbacks: { label: ctx => `${ctx.dataset.label}: $${ctx.parsed.y.toLocaleString()}` } }
                }
            }
        });
        
        // Spending Chart
        const spendingCtx = document.getElementById('spendingChart').getContext('2d');
        spendingChart = new Chart(spendingCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                  { label: 'Remaining Funds', data: [], borderColor: '#9b59b6', backgroundColor: 'rgba(155,89,182,0.12)', tension: 0.4 },
                  { label: 'Cumulative Spending', data: [], borderColor: '#f39c12', backgroundColor: 'rgba(243,156,18,0.12)', tension: 0.4 }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true, ticks: { callback: value => '$' + value.toLocaleString() }},
                    x: { title: { display: true, text: 'Age' } }
                },
                plugins: {
                    tooltip: { callbacks: { label: ctx => `${ctx.dataset.label}: $${ctx.parsed.y.toLocaleString()}` } }
                }
            }
        });
        
        updateCalculations();
    }

    window.addEventListener('load', function() {
        lowOutput.value = lowSlider.value; 
        highOutput.value = highSlider.value;
        initializeCharts();
    });
</script>
</body>
</html>'''

# Save the HTML to a file
with open('retirement_planning_with_toggle.html', 'w', encoding='utf-8') as f:
    f.write(html_content)

print("Enhanced retirement planning webpage created with investment continuation toggle!")
print("File saved as: retirement_planning_with_toggle.html")
print("\nNew Features:")
print("- Toggle switch to continue/stop monthly investments after retirement")
print("- Styled toggle switch with smooth animations")
print("- Investment strategy displayed in summary")
print("- Charts show full timeline from current age to 85")
print("- Intelligent spending allocation across different fund types")
